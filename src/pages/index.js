import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { Email } from '@/components/Email'
const inter = Inter({ subsets: ['latin'] })
import { render } from "@react-email/render";
import {
  Button,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Portal,
  Input,
  Box,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Form,
  FormControl,
  FormLabel,
  FormErrorMessage,
  FormHelperText,
} from '@chakra-ui/react'
import { useEffect, useRef, useState } from 'react'

const SUBJECT = "subject"
const TEXT = "text"

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        as="main"
        w="100%"
        minH="100vh"
      >
        <Tabs
        >
          <TabList
            m="0 auto"
            transform={"translateX(-50px)"}
            maxW="350px">
            <Tab flex={1}>Send email</Tab>
            <Tab flex={1}>Preview</Tab>
            <Tab flex={1}>Settings</Tab>
          </TabList>

          <TabPanels>
            <TabPanel
            >
              <Container>
                <Box transform={"translateY(-300px)"}>
                  <SendEmailForm />
                </Box>
              </Container>
            </TabPanel>
            <TabPanel
            >
              <code>
                <PreviewEmail />
              </code>
            </TabPanel>
            <TabPanel>
              <Container>
                <Settings />
              </Container>
            </TabPanel>
          </TabPanels>

        </Tabs>
      </Box>
    </>
  )
}

function Settings() {
  const [subject, setSubject] = useState("");
  const [text, setText] = useState("");
  const [isSaving, setIsSaving] = useState(false)

  useEffect(() => {
    const savedSubject = localStorage.getItem(SUBJECT);
    const savedText = localStorage.getItem(TEXT);
    console.log(savedSubject, savedText);

    if (savedSubject) {
      setSubject(() => savedSubject);
    }

    if (savedText) {
      setText(() => savedText);
    }

  }, [])

  return (
    <Box
      w="100%"
      display={"flex"}
      flexDir={"column"}
      transform={"translateY(-300px)"}
      as={"form"}
      gap={"35px"}
      onSubmit={(e) => {
        setIsSaving(true)
        e.preventDefault()
        localStorage.setItem("subject", subject);
        localStorage.setItem("text", text)
        setIsSaving(false)
      }}
    >
      <FormControl>
        <FormLabel>Email subject</FormLabel>
        <Input
          onChange={(e) => setSubject(e.target.value)}
          value={subject} type='text' />
      </FormControl>
      <FormControl>
        <FormLabel>Email text</FormLabel>
        <Input
          onChange={(e) => setText(e.target.value)}
          value={text} type='text' />
      </FormControl>
      <CustomButton isSending={isSaving}>
        Save
      </CustomButton>
    </Box>
  )
}

function Container({ children, ...styles }) {
  return (
    <Box
      maxW="900px"
      m="0 auto"
      minH="100vh"
      display={"flex"}
      alignItems={"center"}

    >
      {children}
    </Box>
  )
}

function CustomButton({ isSending, children }) {
  return (
    <Button
      isLoading={isSending}
      className={`${styles.button}`}
      type='submit'
      bg="green.500"
      maxH="50px"
      maxW="200px"
      _hover={{
        backgroundColor: "green.400"
      }}
    >{children}</Button>
  )
}

function PreviewEmail() {
  const html = render(<Email />, {
    pretty: true
  });
  return (
    <div dangerouslySetInnerHTML={{ __html: html }} />
  );
}

function SendEmailForm() {
  const [isSending, setIsSending] = useState();
  const [success, setSuccess] = useState();
  const [showAlert, setShowAlert] = useState(false);
  const [alertText, setAlertText] = useState("")
  const inputRef = useRef();

  useEffect(() => {

    let timer;
    function closeAlert() {
      timer = setTimeout(() => {
        setShowAlert(false)
        setAlertText("")
      }, 4000);
    }

    closeAlert()

    return () => {
      clearTimeout(timer)
    }

  }, [showAlert])


  return (
    <form style={{
      width: "800px",
      display: "flex",
      gap: "5px"
    }}
      onSubmit={async (e) => {
        e.preventDefault()
        const subject = localStorage.getItem(SUBJECT)
        const text = localStorage.getItem(TEXT)


        if (!subject) {
          setShowAlert(true)
          setAlertText("Please set subject in settings!");
          return
        }

        if (!text) {
          setShowAlert(true)
          setAlertText("Please set text in settings!");
          return
        }


        setIsSending(true);
        const html = render(<Email />, {
          pretty: true
        });
        const url = `/api/sendEmail/${inputRef.current.value}`;
        console.log(url);
        const res = await fetch(url, {
          method: "post",
          mode: "no-cors",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            html,
            settingsData: {
              subject,
              text
            }
          }),
        });


        console.log(res, " RES");

        if (res.ok) {
          setSuccess(true);
        } else {
          setSuccess(false)
        }

        setShowAlert(true)
        setIsSending(false)
      }}
    >
      <Input
        type='email'
        placeholder='Enter email of the customer'
        required
        minLength={1}
        colorScheme='gray'
        _active={{
          borderCOlor: "white"
        }}
        _focusVisible={{
          borderColor: "white"
        }}
        ref={inputRef}
      />

      <CustomButton
        isLoading={isSending}
      >Send</CustomButton>
      {showAlert && <Portal zIndex={100}>
        <Alert
          zIndex={100}
          status={success === true ? 'success' : 'error'}
          variant='subtle'
          flexDirection='column'
          alignItems='center'
          justifyContent='center'
          textAlign='center'
          height='200px'
          position={"absolute"}
          top={0}
          left={"50%"}
          transform={"translateX(-50%)"}
          color={"white"}
          fontSize={"24px"}
          gap="15px"
        >
          <AlertIcon width={"35px"} height={"35px"} />
          <AlertTitle>{success === true ? "Email was sent successfully!" : "Error sending email!"}</AlertTitle>
          <AlertDescription>{alertText}</AlertDescription>
        </Alert>
      </Portal>}
    </form>
  )
}
